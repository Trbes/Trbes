.container
  .post-unit
    = div_for(post, class: "post-type-text")
      .post-left
        .post-upvote
          - if current_user.try(:voted_up_on?, post)
            = link_to(post_unvote_path(post, current_user), class: "vote done #{'not-logged-in' unless user_signed_in?}") do
              .fa.fa-check
              .fa.fa-close
          - else
            = link_to(post_vote_path(post, current_user), class: "vote #{'not-logged-in' unless user_signed_in?}") do
              i.fa.fa-thumbs-up
          .vote-count = post.cached_votes_total
        .post-share
          .dropdown.share
            a.share.dropdown-toggle aria-expanded="false" data-toggle="dropdown" href="javascript:void(0)"
              span.icon-share
            = render "posts/share_menu", post: post, position: "left"

      .post-right
        .post-author
          = render "users/avatar",
              membership: post.membership,
              html_class: "user-avatar",
              custom_size: { width: 64, height: 64 }

          .user-title = post.user_title

      .post-content
        header.post-header
          - if post.post_type == "link_post"
            h2.post-title.iconify[
              data-iconify-target=(post.link)
              data-iconify-size="24"] = post.title
          - else
            h2.post-title = raw_sanitize(post.title)
          .post-meta
            span.date posted #{distance_of_time_in_words_to_now(post.created_at) } ago
          .post-controls
            == post_controls(post)
        .post-body
          - if post.post_type == "text_post"
            = raw_sanitize(post.body)
          - elsif post.post_type == "link_post"
            .url
              = link_to post.link, post.link
            = post.body
          - elsif post.post_type == "image_post"
            = cl_image_tag(post.preview_image)

        = render "posts/edit_modal", post: post

    - if (favorite_count = comments.favourite.count) > 0
      section.list-section.best-comment
        header.section-header.sbc-header
          i.fa.fa-star-o
          span.section-count.sbc-count= favorite_count
        - comments.favourite.each do |comment|
          = render "comments/comment", comment: comment

    section.list-section.all-comments
      header.section-header.sbc-header
        i.fa.fa-comment-o
        span.section-count.sbc-count = comments.count == 0 ? "Be the first to comment" : comments.count

      = render "comments/form"

      .comments
        = render comments

- content_for :javascripts do
  coffee:
    $("a.reply").click (e) ->
      e.preventDefault()

      comment = $(this).closest(".comment")

      # Hide form if is showing
      if comment.next(".post-a-comment").length > 0
        comment.next(".post-a-comment").remove()

      # Show form
      else
        # Will need to use some javascript template engine later when
        # there are too much of adhoc cloning usage.
        form = $(".post-a-comment").eq(0).clone()
        form.addClass("nested").
          find("textarea").val("").prop("placeholder", "Write a nice reply...")
        form.find(".parent-comment-id").val(comment.data("id"))
        form.insertAfter(comment)
